/*
* @file
* Provides the layout styles for kl_two_column.
  */
.layout--kl_two_column {
  display: grid;
  /*
  On small screens (below 40em), grid items will naturally stack in a single column
  because no 'grid-template-columns' is defined for this breakpoint.
  The 'gap' property applied via utility classes (e.g., .kl-gap-md)
  will correctly add vertical spacing between these stacked items.
  */
}

/* Sizing variations for larger screens */
@media screen and (min-width: 40em) {
  /*
  Using 'fr' units for grid-template-columns automatically accounts for the 'gap'
  between columns, ensuring the total width remains within the container.
  The 'fr' unit represents a fraction of the available space in the grid container.
  */
  /* 50-50 layout: Two equal columns */
  .layout--kl_two_column--50-50 {
    grid-template-columns: 1fr 1fr;
  }

  /* 25-75 layout */
  .layout--kl_two_column--25-75 {
    /* The second column is three times wider than the first. Total fractions = 1+3 = 4. */
    grid-template-columns: 1fr 3fr;
  }

  /* 75-25 layout */
  .layout--kl_two_column--75-25 {
    /* The first column is three times wider than the second. */
    grid-template-columns: 3fr 1fr;
  }

  /* 33-67 layout */
  .layout--kl_two_column--33-67 {
    /* Approximately 1/3 and 2/3. Total fractions = 1+2 = 3. */
    grid-template-columns: 1fr 2fr;
  }

  /* 67-33 layout */
  .layout--kl_two_column--67-33 {
    /* Approximately 2/3 and 1/3. */
    grid-template-columns: 2fr 1fr;
  }
}

/*
Note on .layout__region styles:
With CSS Grid, region-specific sizing rules are no longer necessary.
1. Stacking is the default behavior for grid items when no columns are defined.
2. Column widths are defined on the parent container using `grid-template-columns`,
   so child-specific sizing rules are not needed. Grid items automatically flow
   into the defined columns.
   */
