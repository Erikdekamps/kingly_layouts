/*
 * @file
 * Provides the layout styles for kingly_threecol.
 */
.layout--kingly_threecol {
  display: grid;
  /*
    On small screens (below 40em), grid items will naturally stack in a single column
    because no 'grid-template-columns' is defined for this breakpoint.
    Each direct child (.layout__region) will implicitly take up 100% width of its row.
    The 'gap' property applied via utility classes (e.g., .kl-gap-md)
    will correctly add vertical spacing between these stacked items.
  */
}

/* Sizing variations for larger screens */
@media screen and (min-width: 40em) {
  /*
    Using 'fr' units for grid-template-columns automatically accounts for the 'gap'
    between columns, ensuring the total width remains within the container.
    The 'fr' unit represents a fraction of the available space in the grid container.
  */
  /* 33-34-33 layout: Three columns, roughly equal */
  .layout--kingly_threecol--33-34-33 {
    /*
      1fr 1fr 1fr means each column takes an equal share of the available space.
      This is the most common and robust way to create equally sized columns
      that correctly account for gaps.
    */
    grid-template-columns: 1fr 1fr 1fr;
  }

  /* 25-50-25 layout: Side-center-side with a wider middle column */
  .layout--kingly_threecol--25-50-25 {
    /*
      1fr 2fr 1fr means the middle column is twice as wide as the side columns.
      The total "fractions" are 1+2+1 = 4. So, the columns will be 1/4, 2/4 (1/2), 1/4
      of the available space, respectively.
    */
    grid-template-columns: 1fr 2fr 1fr;
  }

  /* 25-25-50 layout: Two narrow columns, one wide column at the end */
  .layout--kingly_threecol--25-25-50 {
    /* 1/4, 1/4, 2/4 of available space */
    grid-template-columns: 1fr 1fr 2fr;
  }

  /* 50-25-25 layout: One wide column at the start, two narrow columns */
  .layout--kingly_threecol--50-25-25 {
    /* 2/4, 1/4, 1/4 of available space */
    grid-template-columns: 2fr 1fr 1fr;
  }
}

/*
  Note on .layout__region styles:
  The original CSS had:
  `.layout--kingly_threecol > .layout__region { flex: 1 1 100%; }`

  This `flex` property was crucial for making regions take full width on small screens
  and for flexbox's column distribution. With `display: grid;` on the parent,
  and no `grid-template-columns` defined for small screens, each direct child
  (`.layout__region`) will naturally occupy its own row, effectively stacking them
  vertically (achieving the 100% width behavior).

  For larger screens, the `grid-template-columns` on the parent (`.layout--kingly_threecol--<sizing>`)
  explicitly defines the column widths, making individual `flex` properties on the
  regions unnecessary for sizing.

  Therefore, this specific `.layout__region` rule can be entirely removed if its
  only purpose was the `flex` property for column sizing. If `.layout__region`
  has other general styling (e.g., padding, background, borders) that is not
  related to column sizing, those styles should be kept in a separate, general
  `.layout__region` rule. Based on the provided file, its only purpose was the flex property.
*/
